#!/bin/sh -e

. "$(dirname "$0")/common.func"

which depmod || export PATH=/sbin:/usr/sbin:$PATH

trap_fail

: ${nr_procs:=$(grep -c ^processor /proc/cpuinfo)}
: ${nr_procs:=2}
: ${build_dir:=$(readlink -f "$PWD")}

kernel_src="$1"

test -e "${build_dir}/.config" -o -z "$(find "${build_dir}/" -mindepth 1 -maxdepth 1)" && test -e "$kernel_src/Makefile"  || {
  echo "Usage: ${0##*/} <kernel_src> [<patches..>]" >&2
  echo "This script have to be run in kernel build dir or completely empty directory" >&2
  exit 1
}

shift

: ${kver:=$(make -s -C "$kernel_src" O="$build_dir" kernelversion)}

test -e ".config" || make -C "$kernel_src" O="$build_dir" menuconfig

make -j$nr_procs -C "$kernel_src" O="$build_dir" INSTALL_MOD_STRIP=1 deb-pkg

: ${sfs_d:=$(mktemp -d /tmp/kernel_sfs_d.$$.XXXXXX)}

find "$build_dir/../" -mindepth 1 -maxdepth 1 -name "linux-*_${kver}-$(cat "$build_dir/.version")_*.deb" -not -name "linux-libc-dev_*" \
  -exec env sfs_d="$sfs_d" sh -c 'for deb;do dpkg-deb -x "$deb" "$sfs_d";done' _.sh {} +

depmod -b "$sfs_d" "$kver"

rebuild_sfs "$sfs_d" "$build_dir/../10-kernel-$kver.sfs" "" -all-root -noappend

case "$sfs_d" in /tmp/kernel_sfs_d.$$.*) rm -r "$sfs_d";; esac

exit_succ
